/*
--------------------------------------------------------------------------------------------------------------------------------------------

Hex :  00 = 0  ,  FF = 255 ;    روش نامگزاری رنگ ها به صورت هگزا دسیمال

   اعداد به مبنای ۱۶

بیت ذخیره می شود ۴ 

#A1FFCD =  3 byte

CD  10 * 12 +  1 * 13 = 120 + 13 = 133


هر رقم در هگزا دسیمال از ۴ رقم به صورت باینری ذخیره شده است


0 1 2 3 4 5 6 7 8 9 A B C D E F   که اعداد بین ۱ تا ۱۵ به ترتیب داخل خودش شامل می شود

16 ^ 1     16 ^ 0
   #          # 


شیوه شمارش به این صورت هستش که به صورت دو رقم دو رقم میایم و تغیرات رو اعمال میکنیم

01   02   03  04  05  06   07  08   09   0A    0B  0C  0D    0E    0F
11   12   13  14  15  16   17  18   19   1A    1B  1C  1D    1E    1F

FF بزرک ترین عدد در داخل آن 

16   1
F    F
16 * F   +  F * 1   =  16  * 15  +  15  = 255

--------------------------------------------------------------------------------------------------------------------------------------------

pointers : به خونه ای از حافظه میاد و اشاره میکنه که متغیر امون در داخل اون ذخیره شده است

با استفاده از عملگر * میتونیم به اون خونه از حافظه که بهش اشاره میکنه بریم و اشاره کنیم و یک راه جایگزین برای انتقال داده ها
ها انتقال میدیم قدرت انتقال مقادیر واقعی رو به صورتی که به pointers بین توابع هستند ما وقتی میایم و یک داده رو با استفاده از  
این صورت که با تغیر بر روی یک تابع میتونه عملکرد های مختلف رو هم تحت تاثیر قرار بده

dereferencing the pointer : عدم اجاع به اشاره گر

هدف اصلی این اشاره گر این هست که به ما اجازه x  که مقدار آن در آدرس int یک اشاره گر به &x باشد int یک متغیر از نوع x اگر متغیر 
دهد مکانی را که به آن اشاره میکند رو بیایم و تغیر دهیم یا بررسی کنیم 


Dynamic Memory allocation: یک تابع به وجود اومده در زبان سی هستش که این تابع برای اختصاص دادن مقدار مشخصی از حافظه به آرایه ای که
به فضای اختصاص داده شده در حافظه بر میگرداند pointers قرار است ایجاد شود استفاده می شود همچنین با استفاده از این تابه یک 

ذخیره سازی stack میاد درحالی که ما نام متغیر هامون رو معمولا میایم و در داخل Heap از داخل یک جایی به نام به Dynamic Memory allocation این 
میکنیم

malloc (number * sizeof(int )) ما با استفاده از این تابع میتونیم بیایم و تعداد داده هامون رو مشخص کنیم که چقدر حافظه بهش
تخصیص داده بشه

خوب حالا وقتی ما اومدیم و حافظه امون رو تخصیص دادیم کاری دیگه ای که باید بکنیم این هستش که بیایم و اون رو آزاد کنیم که برای این کار
استفاده میکنیم free از تابع 

--------------------------------------------------------------------------------------------------------------------------------------------

میاد و به آدرس ما در داخل حافظه امون اشاره میکنه &n 

int n = 50;
int *p = &n;

برای مثال ما با استفاده از دستور زیر میتونیم بیایم و به آدرس حافطه متغیری که ذحیره کردیم دسترسی داشته باشیم

#include <stdio.h>

int main(void)
{
    int n = 50;
    int *p = &n;
    printf("%p\n", p);
}


-------------------------------------

#include <stdio.h>

int main(void)
{
    // int n = 50;
    // int *p = &n;
    char *s = "HI!";
    char *p = &s[0];
    printf("%p\n",p);
    printf("%p\n",s);
}

خوب طبق مثال زیر اگر بیایم و نگاه کنیم میتونیم ببینیم که هر خونه حافظه مقادیر یک رشته رو بشت سر هم میاد و ذخیره میکنه


#include <stdio.h>

int main(void)
{
    char *s = "HI!";
    printf("%c\n",*s);
    printf("%c\n",*s(s+1));
    printf("%c\n",*s(s+2));
}

خوب ما با استفاده از حالت بالا میتونیم با استفاده از خونه های حافظه بیایم و به مقادیر دسترسی داشته باشیم

#include <stdio.h>

int main(void)
{

    int numbers[] = {4,6,8,2,7,5,0}

    printf("%i\n", *number);
    printf("%i\n", *number(numbers + 1));
    printf("%i\n", *number(numbers + 2));
    printf("%i\n", *number(numbers + 3));
    printf("%i\n", *number(numbers + 4));
    printf("%i\n", *number(numbers + 5));
    printf("%i\n", *number(numbers + 6));

}

در داخل سی دو تا رشته هیچ وقت باهم دیگه برابر نیستند دلیل اصلی اون هم این هستش که هر رشته به یک آدرس در حافطه
میاد و اشاره میکنه

برای چک کردن برابری بهتر هستش که بیایم و به صورت زیر عمل بکنیم

#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    char *s = get_string("s : ");
    char *t = get_string("t : ");

    if (strcmp(s, t) == 0)
    {
        printf("Same\n");
    }
    else
    {
        printf("Different\n");
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------

وقتی ما میایم و یک بخشی از  حافظه رو اشغال میکنیم ولی اون رو آزاد نمیکنیم با خطای دستوری 

memory leap مواجه می شویم

valgrind  ./memory   میتونیم بیایم و مدیریت حاظفه رو ببینیم

valgrind این بکیج رو باید بیایم و نصب اش بکنیم در داخل لینوکس امون

sudo apt install valgrind

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
    int *x = malloc(3 * sizeof(int));
    x[0] = 72;
    x[1] = 73;
    x[2] = 33;
    free(x);
}

--------------------------------------------------------------------------------------------------------------------------------------------

رو تنظیم میکنند pointees میسازیم به چیزی اشاره نمیکنند و در اصل میاد و یکسری  *x  در ابتدا اشاره گر هایی  که میایم و به صورت

در ابتدا برنامه ما میاد و همه ی صفر یک هارو ذخیره میکنه
و بعد از اون میاد  و همه متغیر های سراسری ما رو ذخیره سازی میکنه
امون میاد و ذخیره میشه  heap و بعد از اون هم قسمت مموری یا 
برنامه امون میاد و ذخیره میشه stack  و در مرحله نهایی 

--------------------------------------------------------------------------------------------------------------------------------------------

callStack :  یک کال استک از یکسری فریم اومده و تشکیل شده و وظیفه اون نگه داری و فراخوانی متغیر ها و توابع ای هستش که باید اجرا بشند

--------------------------------------------------------------------------------------------------------------------------------------------

هنگامی که ما میایم و یک تابع رو فراخوانی میکنیم سیستم حافظه رو برای انجام کار ضروری خودمون اختصاص میکنیم ما اغلب چنین تکه هایی از 
stack frames  or  function frames  مینامیم


FILE POINTER:  که برای کنترل و بررسی فایل هایی که در دسترس امون هستش قرار میگیره  و البته یک نوع داده ای جدید داریم pointers این فایل یک 
فایل هامون استفاده می شود این نوع داده در  pointers که برای  FILE به نام
در دسترس هستش stdio.h


--------------------------------------------------------------------------------------------------------------------------------------------
*/
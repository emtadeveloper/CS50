/*
--------------------------------------------------------------------------------------------------------------------------------------------------
==================================================================================================================================================

Concept Argoritm :مجموعه از مراحل برای حل یک مسله رو الگوریتم میگویند هربرنامه ای که توسعه داده می شود از یک یا چند الگوریتم
تشکیل شده است هدف اصلی خل مسایل با استفاده از الگوریتم ها است

انتخاب درست یک الگوریتم به منظور ارایه بهترین راه حل برای حل مسله مورد نظر امون هستش

بهترین راه حل مسله

۱- تعداد کد های کمتر که فرایند های پردازشی رو برامون کمتر میکنه و خوانایی کد بهتری رو هم داریم 

۲- بیشتر استفاده از حافظه کمتر Performance  تمرکز اصلی ما روی 


مثال ما  اگر بخایم بیایم و یک الگوریتم بنویسیم برای جمع مقادیر داخل یک آرایه و بخایم میزان پیچیدگی اون رو اندازه بگیریم میتونیم بیایم
و به صورت زیر عمل بکنیم


function addNumbers(number){

      let  result = 0;  // run : 1

      for(const item of numbers){ // run : 1

        result += item  // run : n legth array

      }

      return result // run : 1
}

// T : 1 + 1 + 1 + n  = 3 + n

console.log(addNumbers([2,8,10,5]))


===================================================================================================================================================

برای مقایسه بهتر این که ببینیم یک الگوریتم خوب هستش یا بد چند تا بارامتر برای مقایسه کردن اون ها داریم

۱- سرعت که ببنیم سرعت اچرای کدهامون به چه صورت هستش زیاده یا کم

یک نماد کلی هستش که دانشمندان علوم کامبیوتر اون رو تعریف کردن که مدت زمان اجرای یک الگوریتم رو میگه O 

O ( n ) : یعنی الگوریتم ما با یک حلقه بیاد و تک تک عناصر امون رو بیمایش بکنه   

O ( log n ) : یعنی  الگوریم ما بیاد و مثلا از وسط آرایه هامون شروع به بیمایش بکنه یا اینکه بیاد و به صورت دودویی شروع به بیماش بکنه

capsulation : به معنای محصور کردن اطلاعات مرتبط با هم دیگه 
 
انواع الگوریتم های مرتب سازی

۱- Selection Sort : آرایه از اعداد رو میگیره و کوچک ترین آن هارو انتخاب میکنه و اون رو در ابتدای آرایه قرار میده
و سبس در باقی مانده آرایه شروع میکنه به جسنجو و به همین شکل کوچک ترین هارو بیدا میکنه و مرتب سازی شون میکنه

به تعداد خونه ها منهای یک میاد و عمل مقایسه رو انجام میده و این کار برای این هستش که خونه آخر دیگه مقایسه شده و دیگه نیازی به
مقایسه کردن اون نیستش

سرعت اجرا  O (n ^ 2 )

function selectionSort(arr) {
    for (let i = 0; i < arr.length; i++) {
        let minIndex = i;

        for (let j = i + 1; j < arr.length; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        if (i !== minIndex) {
            const lesser = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = lesser;
        }
    }

    return arr;
}

console.log(selectionSort([10, 4, 3, 8, -10]));

//output : [ 3, 4, 8, 10 ]
-
2- Bubble Sort : در این روش میاد و آیتم های آرایه امون رو به صورت دوتایی مرتب میکنه و بر اساس اون ها مرتب سازی میکنه و این
عمل رو اینقد تکرار میکنه که دیگه  ترتیب ها درست برقرار بشن

سرعت اجرا  O (n ^ 2 )

function bubbleSort(arr) {
    //sort the array
    for (let i = 0; i < arr.length; i++) {
        for (let j = 0; j < arr.length - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                const lesser = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = lesser;
            }
        }
    }

    //returning the array
    return arr;
}

console.log(bubbleSort([10, 4, 3, 8]));
//output : [ 3, 4, 8, 10 ]


3- Merge Sort : در این روش با گرفتن یک آرایه و تقسیم اون به دو قسمت چب و راست و مرتب کردن هر کدوم از نیمه ها
شروع به کار می کند و بعد از مرتب سازی اون نیمه هارو میاد و باهم دیگه  ادغام میکند

function insertionSort(arr) {
    const len = arr.length;

    for (let i = 0; i < len; i++) {
        let key = arr[i];
        let j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }

        arr[j + 1] = key;
    }

    return arr;
}

console.log(insertionSort([20, 5, 15, 35, 10]));
//output: [ 5, 10, 15, 20, 35 ]


سرعت اجرا  O ( n log n )

===================================================================================================================================================
---------------------------------------------------------------------------------------------------------------------------------------------------
*/